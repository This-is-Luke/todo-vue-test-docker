import express from 'express';
import { getManager } from 'typeorm';
import ShoppingList from '../models/ShoppingList';

const router = express.Router();

// Create a new Shopping List item
router.post('/shopping-list', async (req, res) => {
  const shoppingListRepository = getManager().getRepository(ShoppingList);
  const { itemName, quantity } = req.body;
  const userId = 1; // Replace this with the actual user ID once you have authentication set up
  const id = 0; // This will be auto-generated by the database
  const isPurchased = false; // Default value
  const item = new ShoppingList(id, userId, itemName, quantity, isPurchased);
  
  await shoppingListRepository.save(item);
  return res.status(201).json(item);
});

// Get all Shopping List items
router.get('/shopping-list', async (req, res) => {
  const shoppingListRepository = getManager().getRepository(ShoppingList);
  const items = await shoppingListRepository.find();
  return res.json(items);
});

// Update a Shopping List item
router.put('/shopping-list/:id', async (req, res) => {
  const shoppingListRepository = getManager().getRepository(ShoppingList);
  const id = Number(req.params.id); // Convert string to number
  const { itemName, quantity } = req.body;
  await shoppingListRepository.update(id, { itemName, quantity });
  const updatedItem = await shoppingListRepository.findOne({ where: { id: id } });
  return res.json(updatedItem);
});

// Delete a Shopping List item
router.delete('/shopping-list/:id', async (req, res) => {
  const shoppingListRepository = getManager().getRepository(ShoppingList);
  const id = Number(req.params.id); // Convert string to number
  await shoppingListRepository.delete(id);
  return res.status(204).send();
});

export default router;
