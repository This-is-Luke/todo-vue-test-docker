"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const typeorm_1 = require("typeorm");
const ShoppingList_1 = __importDefault(require("../models/ShoppingList"));
const router = express_1.default.Router();
const shoppingListRepository = (0, typeorm_1.getManager)().getRepository(ShoppingList_1.default);
// Create a new Shopping List item
router.post('/shopping-list', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { itemName, quantity } = req.body;
    const userId = 1; // Replace this with the actual user ID once you have authentication set up
    const id = 0; // This will be auto-generated by the database
    const isPurchased = false; // Default value
    const item = new ShoppingList_1.default(id, userId, itemName, quantity, isPurchased);
    yield shoppingListRepository.save(item);
    return res.status(201).json(item);
}));
// Get all Shopping List items
router.get('/shopping-list', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const items = yield shoppingListRepository.find();
    return res.json(items);
}));
// Update a Shopping List item
router.put('/shopping-list/:id', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const id = Number(req.params.id); // Convert string to number
    const { itemName, quantity } = req.body;
    yield shoppingListRepository.update(id, { itemName, quantity });
    const updatedItem = yield shoppingListRepository.findOne({ where: { id: id } });
    return res.json(updatedItem);
}));
// Delete a Shopping List item
router.delete('/shopping-list/:id', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const id = Number(req.params.id); // Convert string to number
    yield shoppingListRepository.delete(id);
    return res.status(204).send();
}));
exports.default = router;
